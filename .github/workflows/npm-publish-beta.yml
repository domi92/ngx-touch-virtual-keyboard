name: 'NPM publish beta'

on:
  workflow_dispatch:
  pull_request:
    branches:
      - beta
  push:
    branches:
      - beta
jobs:
  checkVersion:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: beta

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: npm install

      - name: Get package version from package.json
        id: package-version
        run: echo ::set-output name=version::$(node -p "require('./projects/ngx-touch-virtual-keyboard/package.json').version")

      - name: Get latest version from npm registry
        id: npm-latest-version
        run: echo ::set-output name=version::$(npm show ngx-touch-virtual-keyboard@beta version)

      - name: Compare versions
        id: compare-versions
        run: |
          # Splitting the versions into major, minor, patch, and pre-release parts
          IFS='-.' read -r -a latestVersionArray <<< "$latestVersion"
          IFS='-.' read -r -a packageVersionArray <<< "$packageVersion"

          # Initialize a flag to track if an update text version is needed in pakcage.json
          needsUpdate=false

          # Comparing major, minor, and patch versions
          for i in {0..2}; do
            if ((latestVersionArray[i] > packageVersionArray[i])); then
              needsUpdate=true
              break
            elif ((latestVersionArray[i] < packageVersionArray[i])); then
              break
            fi
          done
          if [[ "$needsUpdate" == "false" ]]; then
              # No need to proceed further version is already bigger
              echo "Update is already needed."
          else
            # If major, minor, and patch versions are equal, compare pre-release parts
            if [[ "${latestVersionArray[3]}" > "${packageVersionArray[3]}" ]]; then
              needsUpdate=true
            fi
          fi

          # Set the output based on the flag value
          echo ::set-output name=needs-update::$needsUpdate

      - name: Notify if update is needed
        if: steps.compare-versions.outputs.needs-update == 'true'
        run: echo "A new version is available, continue with deploy!"

      - name: Stop if version not compatible
        if: steps.compare-versions.outputs.needs-update == 'false'
        run: |
          echo "Version comparison failed: Package version ${{ steps.package-version.outputs.version }} is not greater than ${{ steps.npm-latest-version.outputs.version }}. UPDATE package.json"
          exit 1

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: checkVersion
    if: ${{ needs.checkVersion.result == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: beta

      - name: Set up node.js
        uses: actions/setup-node@v3.3.0
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: https://registry.npmjs.org

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run github-package

      - uses: actions/upload-artifact@v3
        with:
          name: pck
          path: dist
          retention-days: 2

      - name: Publish to NPM
        working-directory: dist/ngx-touch-virtual-keyboard/
        run: npm version prerelease
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM}}

      - name: Publish to NPM
        working-directory: dist/ngx-touch-virtual-keyboard/
        run: npm publish --tag beta
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM}}
